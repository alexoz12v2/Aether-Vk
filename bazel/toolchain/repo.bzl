"""A repository rule that sets up the Windows C++ toolchain configuration."""

def _repo_windows_cc_config_impl(repository_ctx):
    """Set up the Windows C++ toolchain repo configuration."""
    repository_ctx.file("README.md", "This repository sets up the Windows C++ toolchain configuration.")
    repository_ctx.symlink(repository_ctx.attr.msvc_include_path, "msvc_include")
    repository_ctx.symlink(repository_ctx.attr.msvc_mfc_include_path, "msvc_mfc_include")
    repository_ctx.symlink(repository_ctx.attr.llvm_include_path, "llvm_include")
    repository_ctx.symlink(repository_ctx.attr.llvm_share_path, "llvm_share")
    repository_ctx.symlink(repository_ctx.attr.llvm_sanitizer_path, "llvm_sanitizer")
    repository_ctx.symlink(repository_ctx.attr.windows_sdk_base_path, "windows_sdk")
    repository_ctx.file("BUILD", """
package(default_visibility = ["//visibility:public"])

# --- LLVM Components ---
filegroup(
    name = "llvm_include",
    srcs = glob(["llvm_include/**"]),
)

filegroup(
    name = "llvm_share",
    srcs = glob(["llvm_share/**"]),
)

filegroup(
    name = "llvm_sanitizer",
    srcs = glob(["llvm_sanitizer/**"]),
)

cc_import(
    name = "asan_dynamic_runtime",
    # Problem on Windows: If a custom toolchain is used, Bazel adds -Xlinker -rpath as arguments to its linker invocation.
    # The MSVC linker does not support this argument, so linking fails.
    interface_library = ":llvm_sanitizer/clang_rt.asan_dynamic-x86_64.lib",
    shared_library = ":llvm_sanitizer/clang_rt.asan_dynamic-x86_64.dll",
    # static_library = ":llvm_sanitizer/clang_rt.asan_dynamic-x86_64.lib",
    # data = [":copy_asan_dll"], # add this to any dependency on this
    deps = [":asan_dynamic_runtime_thunk"],
)

# The ASan runtime thunk â€” it's a tiny .lib that bridges between the binary and the dynamic ASan runtime
cc_import(
    name = "asan_dynamic_runtime_thunk",
    static_library = ":llvm_sanitizer/clang_rt.asan_dynamic_runtime_thunk-x86_64.lib",
)

# --- MSVC include dirs ---
filegroup(
    name = "msvc_include",
    srcs = glob(["msvc_include/**"]),
)

filegroup(
    name = "msvc_mfc_include",
    srcs = glob(["msvc_mfc_include/**"]),
)

# --- Windows SDK base ---
filegroup(
    name = "windows_sdk",
    srcs = glob(["windows_sdk/**"]),
)

# Optional: meta-group for all includes
filegroup(
    name = "all_includes",
    srcs = [
        ":llvm_include",
        ":llvm_share",
        ":msvc_include",
        ":msvc_mfc_include",
        ":windows_sdk",
    ],
)

# Copy the ASAN DLL to a fixed location for easier access
genrule(
    name = "copy_asan_dll",
    srcs = ["llvm_sanitizer/clang_rt.asan_dynamic-x86_64.dll"],
    outs = ["clang_rt.asan_dynamic-x86_64.dll"],
    # cat ensures we copy contents, not the symlink metadata
    cmd = "cat $(SRCS) > $(OUTS)",
    visibility = ["//visibility:public"],
)
""")

    def normalize_path(path):
        if path == None:
            return ""
        return path.replace("\\", "/")

    win_sdk_base = normalize_path(repository_ctx.attr.windows_sdk_base_path)
    win_sdk_lib_base = win_sdk_base + "lib/" + repository_ctx.attr.windows_sdk_version
    lib = normalize_path(repository_ctx.attr.msvc_include_path).replace("include", "lib/x64") + \
        ";" + normalize_path(repository_ctx.attr.msvc_mfc_include_path).replace("include", "lib/x64") + \
        ";" + win_sdk_lib_base + "/ucrt/x64" + ";" + win_sdk_lib_base + "/um/x64"
    env_path = normalize_path(normalize_path(repository_ctx.attr.llvm_bin_path) +";" \
        + normalize_path(repository_ctx.attr.msvc_include_path) + ";" + normalize_path(repository_ctx.attr.msvc_mfc_include_path))

    repository_ctx.file("config.bzl", """
# This file is auto-generated by the repo_windows_cc_config rule.
LLVM_BIN = "{llvm_bin}"
WINDOWS_SDK_VERSION = "{windows_sdk_version}"
ENV_PATH = "{env_path}"
ENV_LIB = "{env_lib}"
ENV_INCLUDE = "{llvm_share};{llvm_include};{msvc_include};{msvc_mfc};{win_sdk_base}/include/{windows_sdk_version}/ucrt;{win_sdk_base}/include/{windows_sdk_version}/shared;{win_sdk_base}/include/{windows_sdk_version}/um;{win_sdk_base}/include/{windows_sdk_version}/winrt;{win_sdk_base}/include/{windows_sdk_version}/cppwinrt"
ENV_TEMP = "{env_temp}"
MSVC_BIN = "{env_msvc}"
SYSTEM_INCLUDES = [
    "{llvm_share}",
    "{llvm_include}",
    "{msvc_include}",
    "{msvc_mfc}",
    "{win_sdk_base}/include/{windows_sdk_version}/ucrt",
    "{win_sdk_base}/include/{windows_sdk_version}/shared",
    "{win_sdk_base}/include/{windows_sdk_version}/um",
    "{win_sdk_base}/include/{windows_sdk_version}/winrt",
    "{win_sdk_base}/include/{windows_sdk_version}/cppwinrt",
]
""".format(
    windows_sdk_version = repository_ctx.attr.windows_sdk_version,
    llvm_bin = normalize_path(repository_ctx.attr.llvm_bin_path),
    llvm_share = normalize_path(repository_ctx.attr.llvm_share_path),
    llvm_include = normalize_path(repository_ctx.attr.llvm_include_path),
    msvc_include = normalize_path(repository_ctx.attr.msvc_include_path),
    msvc_mfc = normalize_path(repository_ctx.attr.msvc_mfc_include_path),
    win_sdk_base = win_sdk_base,
    env_path = env_path,
    env_lib = lib,
    env_temp = normalize_path(repository_ctx.getenv("TEMP", "C:/Users/" + repository_ctx.getenv("USERNAME", "") + "/Appdata/Temp")),
    env_msvc = normalize_path(repository_ctx.attr.msvc_bin_path),
    ))


repo_windows_cc_config = repository_rule(
    implementation = _repo_windows_cc_config_impl,
    attrs = {
        "msvc_include_path": attr.string(mandatory = True, doc = "Path to MSVC include directory."),
        "msvc_mfc_include_path": attr.string(mandatory = True, doc = "Path to MSVC MFC include directory."),
        "llvm_include_path": attr.string(mandatory = True, doc = "Path to LLVM include directory."),
        "llvm_share_path": attr.string(mandatory = True, doc = "Path to LLVM share directory (more includes)."),
        "llvm_sanitizer_path": attr.string(mandatory = True, doc = "Path to LLVM sanitizer libraries."),
        "windows_sdk_base_path": attr.string(mandatory = False, doc = "Path to Windows SDK base directory."),
        "windows_sdk_version": attr.string(mandatory = False, doc = "Windows SDK version."),
        "llvm_bin_path": attr.string(mandatory = True, doc = "Path to LLVM bin directory (no ending slash)"),
        "msvc_bin_path": attr.string(mandatory = True, doc = "Path to MSVC bin directory (no ending slash)"),
    },
    local = True,
    doc = "A repository rule that sets up the Windows C++ toolchain configuration. (symlinks everything)"
)
